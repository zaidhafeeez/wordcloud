name: Random Commit Generator
on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:
    inputs:
      commit_count:
        description: 'Number of commits to generate'
        required: true
        default: '5'
        type: string

jobs:
  generate-commits:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Create random commit generator
        run: |
          cat << 'EOF' > generate_commits.py
          import random
          import os
          import datetime
          import sys
          
          # Different types of development activities
          ACTIVITIES = {
              'feat': [
                  'add {feature} functionality',
                  'implement {feature} module',
                  'introduce {feature} support',
                  'create new {feature} component'
              ],
              'fix': [
                  'fix bug in {component}',
                  'resolve {component} issue',
                  'patch {component} vulnerability',
                  'correct {component} behavior'
              ],
              'refactor': [
                  'refactor {component} code',
                  'optimize {component} performance',
                  'improve {component} structure',
                  'clean up {component} implementation'
              ],
              'docs': [
                  'update {component} documentation',
                  'add {component} examples',
                  'improve {component} readme',
                  'document {component} API'
              ],
              'test': [
                  'add tests for {component}',
                  'improve {component} test coverage',
                  'create {component} integration tests',
                  'fix flaky {component} tests'
              ]
          }
          
          FEATURES = [
              'user authentication',
              'data visualization',
              'export',
              'import',
              'search',
              'filtering',
              'sorting',
              'pagination',
              'caching',
              'logging',
              'monitoring',
              'reporting',
              'backup',
              'restore',
              'notification',
              'validation'
          ]
          
          COMPONENTS = [
              'frontend',
              'backend',
              'database',
              'API',
              'UI',
              'authentication',
              'authorization',
              'cache',
              'logger',
              'utils',
              'core',
              'config',
              'tests',
              'docs'
          ]
          
          def generate_commit_message():
              # Select random activity type and template
              activity_type = random.choice(list(ACTIVITIES.keys()))
              template = random.choice(ACTIVITIES[activity_type])
              
              # Select random feature or component based on activity type
              if activity_type == 'feat':
                  placeholder = random.choice(FEATURES)
              else:
                  placeholder = random.choice(COMPONENTS)
              
              # Format message
              message = template.format(
                  feature=placeholder,
                  component=placeholder
              )
              
              # Add optional scope
              if random.random() < 0.3:  # 30% chance to add scope
                  scope = random.choice(COMPONENTS)
                  message = f"{activity_type}({scope}): {message}"
              else:
                  message = f"{activity_type}: {message}"
              
              return message
          
          def create_random_file_change():
              # Create a random file change
              filename = f"dummy/file_{random.randint(1, 100)}.txt"
              os.makedirs(os.path.dirname(filename), exist_ok=True)
              
              with open(filename, 'a') as f:
                  f.write(f"Change made at {datetime.datetime.now()}\n")
              
              return filename
          
          if __name__ == "__main__":
              num_commits = int(sys.argv[1]) if len(sys.argv) > 1 else 5
              
              for _ in range(num_commits):
                  # Create a random change
                  filename = create_random_file_change()
                  
                  # Generate commit message
                  message = generate_commit_message()
                  
                  # Stage and commit
                  os.system(f'git add {filename}')
                  os.system(f'git commit -m "{message}"')
          EOF
      
      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
      
      - name: Generate random commits
        run: |
          # Use input count if provided, otherwise default to 5
          COMMIT_COUNT="${{ github.event.inputs.commit_count || '5' }}"
          python generate_commits.py $COMMIT_COUNT
      
      - name: Push changes
        run: |
          git push
